#include <asf.h>
#define TWI_MASTER TWIC
#define TWI_SLAVE TWIC
#define TWI_MASTER_PORT PORTC
#define TWI_SLAVE_ADDR 0x60
#define TWI_MASTER_ADDR 0x50
#define TWI_SPEED 5000
#define PATTERN_TEST_LENGTH sizeof(test_pattern)
TWI_MASTER_t master;
// Initialize a test pattern
volatile uint8_t test_pattern[] = {
	0x55,
	0xA5,
	0x5A,
	0x77,
	0x99
};
// Initialize buffers to write received data
volatile uint8_t rx_pattern[TWIS_SEND_BUFFER_SIZE] = {};
volatile uint8_t m_rx_pattern[TWIS_SEND_BUFFER_SIZE] = {}; 
// Initialize a slave structure (note case sensitivity)
TWI_Slave_t slave;
// Setup a user flag, its use will become clear later on
volatile Bool tx_in_progress_f = false;

void twi_m_init( PORT_t M_PORT,
TWI_t *module,
twi_options_t *m_opt) {
	uint8_t i=8;
	// Set internal Pull ups for SDA and SCL
	M_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;
	M_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;
	//Initialize Master
	sysclk_enable_peripheral_clock(module);
	twi_master_init(module,m_opt);
	twi_master_enable(module);
}
// Setup a slave process, the process is accessed each time a byte is received
static void slave_process(void)
{
	tx_in_progress_f = true;
}
// The ISR is accessed each time a byte is received
ISR(TWIC_TWIS_vect)
{
	TWI_SlaveInterruptHandler(&slave);
}
void twi_slave_init( TWI_Slave_t *twi,
TWI_t *module,
void (*processDataFunction) (void),
uint8_t address,
TWI_SLAVE_INTLVL_t intLevel) {
	uint8_t i=8;
	// Initialize Slave
	for (i=0;i<TWIS_SEND_BUFFER_SIZE;i++)
	{
		twi->receivedData[i] = 0;
	}
	sysclk_enable_peripheral_clock(module);
	TWI_SlaveInitializeDriver(twi, module, processDataFunction);
	TWI_SlaveInitializeModule(twi,address,intLevel);
}
int main (void)
{
ioport_pin_t LED_0_PIN;
	sysclk_init();
	board_init();
	uint8_t i=8;
	// Prepare Packet to send
	twi_package_t packet_tx ={
		.addr_length = 1, // implies that no command will be sent
		.chip =TWI_SLAVE_ADDR,
		.buffer =(void*)test_pattern,
		.length =PATTERN_TEST_LENGTH,
		.no_wait=false // wait if bus is busy
	};
	twi_options_t m_options ={
		.speed=TWI_SPEED,
		.chip = TWI_MASTER_ADDR,
		.speed_reg=TWI_BAUD(sysclk_get_cpu_hz(),TWI_SPEED)
	};
	// Enable all interrupt levels
	irq_initialize_vectors();
	twi_m_init(TWI_MASTER_PORT,&TWI_MASTER,&m_options);
	// Enable global interrupts
	cpu_irq_enable();
	twi_master_write(&TWI_MASTER,&packet_tx);
	// Wait for transmission to complete
	do{} while(master.STATUS != STATUS_OK);
	// Build a new receiving packet
	twi_package_t packet_rx = {
		.addr_length=1,
		.chip =TWI_SLAVE_ADDR,
		.buffer =(void*)m_rx_pattern,
		.length =PATTERN_TEST_LENGTH,
		.no_wait=false
	};
	twi_master_read(&TWI_MASTER,&packet_rx);
	// wait for data to be received
	/*** Insert Break Point ***/
	do{} while(master.STATUS != STATUS_OK);
	while (1) {
		ioport_toggle_pin_level(LED_0_PIN);
	}
	twi_slave_init( &slave,
	&TWI_SLAVE,
	*slave_process,
	TWI_SLAVE_ADDR,
	TWI_SLAVE_INTLVL_MED_gc);
	cpu_irq_enable();
	while (1) {
		// Check transmission in progress flag
		if(tx_in_progress_f)
		{
			// Wait for reception of whole packet
			do{}while(slave.result!=TWIS_RESULT_OK);
			for (i=0;i<TWIS_SEND_BUFFER_SIZE;i++)
			{
				/**********************************************************************
				**/
				/* Copy received data and prepare data to be transmitted. Note that
				*/
				/* these two can be separated to be able to transmit independently of
				*/
				/* reception of data. However, for the purpose of this test/example
				*/
				/* program, the updating of the data to send was conducted immediately
				*/
				/* to avoid another for loop.
				*/
				/**********************************************************************
				**/
				rx_pattern[i] = slave.receivedData[i];
				slave.sendData[i] = rx_pattern[i] + 1;
			};
			LED_Toggle(LED0); // toggle LED
			// Reset Flag
			/*** Break Point ***/
			tx_in_progress_f = false;
	}
}
}


